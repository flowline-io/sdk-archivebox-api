/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScheduleCommandSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleCommandSchema{}

// ScheduleCommandSchema struct for ScheduleCommandSchema
type ScheduleCommandSchema struct {
	ImportPath NullableString `json:"import_path,omitempty"`
	Add *bool `json:"add,omitempty"`
	Every NullableString `json:"every,omitempty"`
	Tag *string `json:"tag,omitempty"`
	Depth *int32 `json:"depth,omitempty"`
	Overwrite *bool `json:"overwrite,omitempty"`
	Update *bool `json:"update,omitempty"`
	Clear *bool `json:"clear,omitempty"`
}

// NewScheduleCommandSchema instantiates a new ScheduleCommandSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleCommandSchema() *ScheduleCommandSchema {
	this := ScheduleCommandSchema{}
	var add bool = false
	this.Add = &add
	var tag string = ""
	this.Tag = &tag
	var depth int32 = 0
	this.Depth = &depth
	var overwrite bool = false
	this.Overwrite = &overwrite
	var update bool = false
	this.Update = &update
	var clear bool = false
	this.Clear = &clear
	return &this
}

// NewScheduleCommandSchemaWithDefaults instantiates a new ScheduleCommandSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleCommandSchemaWithDefaults() *ScheduleCommandSchema {
	this := ScheduleCommandSchema{}
	var add bool = false
	this.Add = &add
	var tag string = ""
	this.Tag = &tag
	var depth int32 = 0
	this.Depth = &depth
	var overwrite bool = false
	this.Overwrite = &overwrite
	var update bool = false
	this.Update = &update
	var clear bool = false
	this.Clear = &clear
	return &this
}

// GetImportPath returns the ImportPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleCommandSchema) GetImportPath() string {
	if o == nil || IsNil(o.ImportPath.Get()) {
		var ret string
		return ret
	}
	return *o.ImportPath.Get()
}

// GetImportPathOk returns a tuple with the ImportPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleCommandSchema) GetImportPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImportPath.Get(), o.ImportPath.IsSet()
}

// HasImportPath returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasImportPath() bool {
	if o != nil && o.ImportPath.IsSet() {
		return true
	}

	return false
}

// SetImportPath gets a reference to the given NullableString and assigns it to the ImportPath field.
func (o *ScheduleCommandSchema) SetImportPath(v string) {
	o.ImportPath.Set(&v)
}
// SetImportPathNil sets the value for ImportPath to be an explicit nil
func (o *ScheduleCommandSchema) SetImportPathNil() {
	o.ImportPath.Set(nil)
}

// UnsetImportPath ensures that no value is present for ImportPath, not even an explicit nil
func (o *ScheduleCommandSchema) UnsetImportPath() {
	o.ImportPath.Unset()
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *ScheduleCommandSchema) GetAdd() bool {
	if o == nil || IsNil(o.Add) {
		var ret bool
		return ret
	}
	return *o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCommandSchema) GetAddOk() (*bool, bool) {
	if o == nil || IsNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasAdd() bool {
	if o != nil && !IsNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given bool and assigns it to the Add field.
func (o *ScheduleCommandSchema) SetAdd(v bool) {
	o.Add = &v
}

// GetEvery returns the Every field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleCommandSchema) GetEvery() string {
	if o == nil || IsNil(o.Every.Get()) {
		var ret string
		return ret
	}
	return *o.Every.Get()
}

// GetEveryOk returns a tuple with the Every field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleCommandSchema) GetEveryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Every.Get(), o.Every.IsSet()
}

// HasEvery returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasEvery() bool {
	if o != nil && o.Every.IsSet() {
		return true
	}

	return false
}

// SetEvery gets a reference to the given NullableString and assigns it to the Every field.
func (o *ScheduleCommandSchema) SetEvery(v string) {
	o.Every.Set(&v)
}
// SetEveryNil sets the value for Every to be an explicit nil
func (o *ScheduleCommandSchema) SetEveryNil() {
	o.Every.Set(nil)
}

// UnsetEvery ensures that no value is present for Every, not even an explicit nil
func (o *ScheduleCommandSchema) UnsetEvery() {
	o.Every.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ScheduleCommandSchema) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCommandSchema) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *ScheduleCommandSchema) SetTag(v string) {
	o.Tag = &v
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *ScheduleCommandSchema) GetDepth() int32 {
	if o == nil || IsNil(o.Depth) {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCommandSchema) GetDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.Depth) {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasDepth() bool {
	if o != nil && !IsNil(o.Depth) {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *ScheduleCommandSchema) SetDepth(v int32) {
	o.Depth = &v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *ScheduleCommandSchema) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCommandSchema) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *ScheduleCommandSchema) SetOverwrite(v bool) {
	o.Overwrite = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *ScheduleCommandSchema) GetUpdate() bool {
	if o == nil || IsNil(o.Update) {
		var ret bool
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCommandSchema) GetUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given bool and assigns it to the Update field.
func (o *ScheduleCommandSchema) SetUpdate(v bool) {
	o.Update = &v
}

// GetClear returns the Clear field value if set, zero value otherwise.
func (o *ScheduleCommandSchema) GetClear() bool {
	if o == nil || IsNil(o.Clear) {
		var ret bool
		return ret
	}
	return *o.Clear
}

// GetClearOk returns a tuple with the Clear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCommandSchema) GetClearOk() (*bool, bool) {
	if o == nil || IsNil(o.Clear) {
		return nil, false
	}
	return o.Clear, true
}

// HasClear returns a boolean if a field has been set.
func (o *ScheduleCommandSchema) HasClear() bool {
	if o != nil && !IsNil(o.Clear) {
		return true
	}

	return false
}

// SetClear gets a reference to the given bool and assigns it to the Clear field.
func (o *ScheduleCommandSchema) SetClear(v bool) {
	o.Clear = &v
}

func (o ScheduleCommandSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleCommandSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ImportPath.IsSet() {
		toSerialize["import_path"] = o.ImportPath.Get()
	}
	if !IsNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if o.Every.IsSet() {
		toSerialize["every"] = o.Every.Get()
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Depth) {
		toSerialize["depth"] = o.Depth
	}
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Clear) {
		toSerialize["clear"] = o.Clear
	}
	return toSerialize, nil
}

type NullableScheduleCommandSchema struct {
	value *ScheduleCommandSchema
	isSet bool
}

func (v NullableScheduleCommandSchema) Get() *ScheduleCommandSchema {
	return v.value
}

func (v *NullableScheduleCommandSchema) Set(val *ScheduleCommandSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleCommandSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleCommandSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleCommandSchema(val *ScheduleCommandSchema) *NullableScheduleCommandSchema {
	return &NullableScheduleCommandSchema{value: val, isSet: true}
}

func (v NullableScheduleCommandSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleCommandSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


