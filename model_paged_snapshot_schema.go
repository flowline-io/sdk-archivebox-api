/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PagedSnapshotSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PagedSnapshotSchema{}

// PagedSnapshotSchema struct for PagedSnapshotSchema
type PagedSnapshotSchema struct {
	TotalItems int32 `json:"total_items"`
	TotalPages int32 `json:"total_pages"`
	Page int32 `json:"page"`
	Limit int32 `json:"limit"`
	Offset int32 `json:"offset"`
	NumItems int32 `json:"num_items"`
	Items []SnapshotSchema `json:"items"`
}

type _PagedSnapshotSchema PagedSnapshotSchema

// NewPagedSnapshotSchema instantiates a new PagedSnapshotSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPagedSnapshotSchema(totalItems int32, totalPages int32, page int32, limit int32, offset int32, numItems int32, items []SnapshotSchema) *PagedSnapshotSchema {
	this := PagedSnapshotSchema{}
	this.TotalItems = totalItems
	this.TotalPages = totalPages
	this.Page = page
	this.Limit = limit
	this.Offset = offset
	this.NumItems = numItems
	this.Items = items
	return &this
}

// NewPagedSnapshotSchemaWithDefaults instantiates a new PagedSnapshotSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPagedSnapshotSchemaWithDefaults() *PagedSnapshotSchema {
	this := PagedSnapshotSchema{}
	return &this
}

// GetTotalItems returns the TotalItems field value
func (o *PagedSnapshotSchema) GetTotalItems() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value
// and a boolean to check if the value has been set.
func (o *PagedSnapshotSchema) GetTotalItemsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalItems, true
}

// SetTotalItems sets field value
func (o *PagedSnapshotSchema) SetTotalItems(v int32) {
	o.TotalItems = v
}

// GetTotalPages returns the TotalPages field value
func (o *PagedSnapshotSchema) GetTotalPages() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value
// and a boolean to check if the value has been set.
func (o *PagedSnapshotSchema) GetTotalPagesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPages, true
}

// SetTotalPages sets field value
func (o *PagedSnapshotSchema) SetTotalPages(v int32) {
	o.TotalPages = v
}

// GetPage returns the Page field value
func (o *PagedSnapshotSchema) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *PagedSnapshotSchema) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *PagedSnapshotSchema) SetPage(v int32) {
	o.Page = v
}

// GetLimit returns the Limit field value
func (o *PagedSnapshotSchema) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *PagedSnapshotSchema) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *PagedSnapshotSchema) SetLimit(v int32) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *PagedSnapshotSchema) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *PagedSnapshotSchema) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *PagedSnapshotSchema) SetOffset(v int32) {
	o.Offset = v
}

// GetNumItems returns the NumItems field value
func (o *PagedSnapshotSchema) GetNumItems() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumItems
}

// GetNumItemsOk returns a tuple with the NumItems field value
// and a boolean to check if the value has been set.
func (o *PagedSnapshotSchema) GetNumItemsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumItems, true
}

// SetNumItems sets field value
func (o *PagedSnapshotSchema) SetNumItems(v int32) {
	o.NumItems = v
}

// GetItems returns the Items field value
func (o *PagedSnapshotSchema) GetItems() []SnapshotSchema {
	if o == nil {
		var ret []SnapshotSchema
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *PagedSnapshotSchema) GetItemsOk() ([]SnapshotSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *PagedSnapshotSchema) SetItems(v []SnapshotSchema) {
	o.Items = v
}

func (o PagedSnapshotSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PagedSnapshotSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total_items"] = o.TotalItems
	toSerialize["total_pages"] = o.TotalPages
	toSerialize["page"] = o.Page
	toSerialize["limit"] = o.Limit
	toSerialize["offset"] = o.Offset
	toSerialize["num_items"] = o.NumItems
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *PagedSnapshotSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total_items",
		"total_pages",
		"page",
		"limit",
		"offset",
		"num_items",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPagedSnapshotSchema := _PagedSnapshotSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPagedSnapshotSchema)

	if err != nil {
		return err
	}

	*o = PagedSnapshotSchema(varPagedSnapshotSchema)

	return err
}

type NullablePagedSnapshotSchema struct {
	value *PagedSnapshotSchema
	isSet bool
}

func (v NullablePagedSnapshotSchema) Get() *PagedSnapshotSchema {
	return v.value
}

func (v *NullablePagedSnapshotSchema) Set(val *PagedSnapshotSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePagedSnapshotSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePagedSnapshotSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePagedSnapshotSchema(val *PagedSnapshotSchema) *NullablePagedSnapshotSchema {
	return &NullablePagedSnapshotSchema{value: val, isSet: true}
}

func (v NullablePagedSnapshotSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePagedSnapshotSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


