/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RemoveCommandSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveCommandSchema{}

// RemoveCommandSchema struct for RemoveCommandSchema
type RemoveCommandSchema struct {
	Delete *bool `json:"delete,omitempty"`
	After NullableFloat32 `json:"after,omitempty"`
	Before NullableFloat32 `json:"before,omitempty"`
	FilterType *string `json:"filter_type,omitempty"`
	FilterPatterns []string `json:"filter_patterns,omitempty"`
}

// NewRemoveCommandSchema instantiates a new RemoveCommandSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveCommandSchema() *RemoveCommandSchema {
	this := RemoveCommandSchema{}
	var delete bool = true
	this.Delete = &delete
	var filterType string = "exact"
	this.FilterType = &filterType
	return &this
}

// NewRemoveCommandSchemaWithDefaults instantiates a new RemoveCommandSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveCommandSchemaWithDefaults() *RemoveCommandSchema {
	this := RemoveCommandSchema{}
	var delete bool = true
	this.Delete = &delete
	var filterType string = "exact"
	this.FilterType = &filterType
	return &this
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *RemoveCommandSchema) GetDelete() bool {
	if o == nil || IsNil(o.Delete) {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveCommandSchema) GetDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *RemoveCommandSchema) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *RemoveCommandSchema) SetDelete(v bool) {
	o.Delete = &v
}

// GetAfter returns the After field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveCommandSchema) GetAfter() float32 {
	if o == nil || IsNil(o.After.Get()) {
		var ret float32
		return ret
	}
	return *o.After.Get()
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveCommandSchema) GetAfterOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.After.Get(), o.After.IsSet()
}

// HasAfter returns a boolean if a field has been set.
func (o *RemoveCommandSchema) HasAfter() bool {
	if o != nil && o.After.IsSet() {
		return true
	}

	return false
}

// SetAfter gets a reference to the given NullableFloat32 and assigns it to the After field.
func (o *RemoveCommandSchema) SetAfter(v float32) {
	o.After.Set(&v)
}
// SetAfterNil sets the value for After to be an explicit nil
func (o *RemoveCommandSchema) SetAfterNil() {
	o.After.Set(nil)
}

// UnsetAfter ensures that no value is present for After, not even an explicit nil
func (o *RemoveCommandSchema) UnsetAfter() {
	o.After.Unset()
}

// GetBefore returns the Before field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveCommandSchema) GetBefore() float32 {
	if o == nil || IsNil(o.Before.Get()) {
		var ret float32
		return ret
	}
	return *o.Before.Get()
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveCommandSchema) GetBeforeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Before.Get(), o.Before.IsSet()
}

// HasBefore returns a boolean if a field has been set.
func (o *RemoveCommandSchema) HasBefore() bool {
	if o != nil && o.Before.IsSet() {
		return true
	}

	return false
}

// SetBefore gets a reference to the given NullableFloat32 and assigns it to the Before field.
func (o *RemoveCommandSchema) SetBefore(v float32) {
	o.Before.Set(&v)
}
// SetBeforeNil sets the value for Before to be an explicit nil
func (o *RemoveCommandSchema) SetBeforeNil() {
	o.Before.Set(nil)
}

// UnsetBefore ensures that no value is present for Before, not even an explicit nil
func (o *RemoveCommandSchema) UnsetBefore() {
	o.Before.Unset()
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *RemoveCommandSchema) GetFilterType() string {
	if o == nil || IsNil(o.FilterType) {
		var ret string
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveCommandSchema) GetFilterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *RemoveCommandSchema) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given string and assigns it to the FilterType field.
func (o *RemoveCommandSchema) SetFilterType(v string) {
	o.FilterType = &v
}

// GetFilterPatterns returns the FilterPatterns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveCommandSchema) GetFilterPatterns() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.FilterPatterns
}

// GetFilterPatternsOk returns a tuple with the FilterPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveCommandSchema) GetFilterPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterPatterns) {
		return nil, false
	}
	return o.FilterPatterns, true
}

// HasFilterPatterns returns a boolean if a field has been set.
func (o *RemoveCommandSchema) HasFilterPatterns() bool {
	if o != nil && !IsNil(o.FilterPatterns) {
		return true
	}

	return false
}

// SetFilterPatterns gets a reference to the given []string and assigns it to the FilterPatterns field.
func (o *RemoveCommandSchema) SetFilterPatterns(v []string) {
	o.FilterPatterns = v
}

func (o RemoveCommandSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveCommandSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if o.After.IsSet() {
		toSerialize["after"] = o.After.Get()
	}
	if o.Before.IsSet() {
		toSerialize["before"] = o.Before.Get()
	}
	if !IsNil(o.FilterType) {
		toSerialize["filter_type"] = o.FilterType
	}
	if o.FilterPatterns != nil {
		toSerialize["filter_patterns"] = o.FilterPatterns
	}
	return toSerialize, nil
}

type NullableRemoveCommandSchema struct {
	value *RemoveCommandSchema
	isSet bool
}

func (v NullableRemoveCommandSchema) Get() *RemoveCommandSchema {
	return v.value
}

func (v *NullableRemoveCommandSchema) Set(val *RemoveCommandSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveCommandSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveCommandSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveCommandSchema(val *RemoveCommandSchema) *NullableRemoveCommandSchema {
	return &NullableRemoveCommandSchema{value: val, isSet: true}
}

func (v NullableRemoveCommandSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveCommandSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


