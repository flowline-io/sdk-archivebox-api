/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CLICommandResponseSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CLICommandResponseSchema{}

// CLICommandResponseSchema struct for CLICommandResponseSchema
type CLICommandResponseSchema struct {
	Success bool `json:"success"`
	Errors []string `json:"errors"`
	Result NullableResult `json:"result"`
	Stdout string `json:"stdout"`
	Stderr string `json:"stderr"`
}

type _CLICommandResponseSchema CLICommandResponseSchema

// NewCLICommandResponseSchema instantiates a new CLICommandResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCLICommandResponseSchema(success bool, errors []string, result NullableResult, stdout string, stderr string) *CLICommandResponseSchema {
	this := CLICommandResponseSchema{}
	this.Success = success
	this.Errors = errors
	this.Result = result
	this.Stdout = stdout
	this.Stderr = stderr
	return &this
}

// NewCLICommandResponseSchemaWithDefaults instantiates a new CLICommandResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCLICommandResponseSchemaWithDefaults() *CLICommandResponseSchema {
	this := CLICommandResponseSchema{}
	return &this
}

// GetSuccess returns the Success field value
func (o *CLICommandResponseSchema) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *CLICommandResponseSchema) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *CLICommandResponseSchema) SetSuccess(v bool) {
	o.Success = v
}

// GetErrors returns the Errors field value
func (o *CLICommandResponseSchema) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *CLICommandResponseSchema) GetErrorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *CLICommandResponseSchema) SetErrors(v []string) {
	o.Errors = v
}

// GetResult returns the Result field value
// If the value is explicit nil, the zero value for Result will be returned
func (o *CLICommandResponseSchema) GetResult() Result {
	if o == nil || o.Result.Get() == nil {
		var ret Result
		return ret
	}

	return *o.Result.Get()
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CLICommandResponseSchema) GetResultOk() (*Result, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result.Get(), o.Result.IsSet()
}

// SetResult sets field value
func (o *CLICommandResponseSchema) SetResult(v Result) {
	o.Result.Set(&v)
}

// GetStdout returns the Stdout field value
func (o *CLICommandResponseSchema) GetStdout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stdout
}

// GetStdoutOk returns a tuple with the Stdout field value
// and a boolean to check if the value has been set.
func (o *CLICommandResponseSchema) GetStdoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stdout, true
}

// SetStdout sets field value
func (o *CLICommandResponseSchema) SetStdout(v string) {
	o.Stdout = v
}

// GetStderr returns the Stderr field value
func (o *CLICommandResponseSchema) GetStderr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stderr
}

// GetStderrOk returns a tuple with the Stderr field value
// and a boolean to check if the value has been set.
func (o *CLICommandResponseSchema) GetStderrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stderr, true
}

// SetStderr sets field value
func (o *CLICommandResponseSchema) SetStderr(v string) {
	o.Stderr = v
}

func (o CLICommandResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CLICommandResponseSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["errors"] = o.Errors
	toSerialize["result"] = o.Result.Get()
	toSerialize["stdout"] = o.Stdout
	toSerialize["stderr"] = o.Stderr
	return toSerialize, nil
}

func (o *CLICommandResponseSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"errors",
		"result",
		"stdout",
		"stderr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCLICommandResponseSchema := _CLICommandResponseSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCLICommandResponseSchema)

	if err != nil {
		return err
	}

	*o = CLICommandResponseSchema(varCLICommandResponseSchema)

	return err
}

type NullableCLICommandResponseSchema struct {
	value *CLICommandResponseSchema
	isSet bool
}

func (v NullableCLICommandResponseSchema) Get() *CLICommandResponseSchema {
	return v.value
}

func (v *NullableCLICommandResponseSchema) Set(val *CLICommandResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCLICommandResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCLICommandResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCLICommandResponseSchema(val *CLICommandResponseSchema) *NullableCLICommandResponseSchema {
	return &NullableCLICommandResponseSchema{value: val, isSet: true}
}

func (v NullableCLICommandResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCLICommandResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


