/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddCommandSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCommandSchema{}

// AddCommandSchema struct for AddCommandSchema
type AddCommandSchema struct {
	Urls []string `json:"urls"`
	Tag *string `json:"tag,omitempty"`
	Depth *int32 `json:"depth,omitempty"`
	Update *bool `json:"update,omitempty"`
	UpdateAll *bool `json:"update_all,omitempty"`
	IndexOnly *bool `json:"index_only,omitempty"`
	Overwrite *bool `json:"overwrite,omitempty"`
	Init *bool `json:"init,omitempty"`
	Extractors *string `json:"extractors,omitempty"`
	Parser *string `json:"parser,omitempty"`
}

type _AddCommandSchema AddCommandSchema

// NewAddCommandSchema instantiates a new AddCommandSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCommandSchema(urls []string) *AddCommandSchema {
	this := AddCommandSchema{}
	this.Urls = urls
	var tag string = ""
	this.Tag = &tag
	var depth int32 = 0
	this.Depth = &depth
	var update bool = false
	this.Update = &update
	var updateAll bool = false
	this.UpdateAll = &updateAll
	var indexOnly bool = false
	this.IndexOnly = &indexOnly
	var overwrite bool = false
	this.Overwrite = &overwrite
	var init bool = false
	this.Init = &init
	var extractors string = ""
	this.Extractors = &extractors
	var parser string = "auto"
	this.Parser = &parser
	return &this
}

// NewAddCommandSchemaWithDefaults instantiates a new AddCommandSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCommandSchemaWithDefaults() *AddCommandSchema {
	this := AddCommandSchema{}
	var tag string = ""
	this.Tag = &tag
	var depth int32 = 0
	this.Depth = &depth
	var update bool = false
	this.Update = &update
	var updateAll bool = false
	this.UpdateAll = &updateAll
	var indexOnly bool = false
	this.IndexOnly = &indexOnly
	var overwrite bool = false
	this.Overwrite = &overwrite
	var init bool = false
	this.Init = &init
	var extractors string = ""
	this.Extractors = &extractors
	var parser string = "auto"
	this.Parser = &parser
	return &this
}

// GetUrls returns the Urls field value
func (o *AddCommandSchema) GetUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetUrlsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Urls, true
}

// SetUrls sets field value
func (o *AddCommandSchema) SetUrls(v []string) {
	o.Urls = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *AddCommandSchema) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *AddCommandSchema) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *AddCommandSchema) SetTag(v string) {
	o.Tag = &v
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *AddCommandSchema) GetDepth() int32 {
	if o == nil || IsNil(o.Depth) {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.Depth) {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *AddCommandSchema) HasDepth() bool {
	if o != nil && !IsNil(o.Depth) {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *AddCommandSchema) SetDepth(v int32) {
	o.Depth = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *AddCommandSchema) GetUpdate() bool {
	if o == nil || IsNil(o.Update) {
		var ret bool
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *AddCommandSchema) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given bool and assigns it to the Update field.
func (o *AddCommandSchema) SetUpdate(v bool) {
	o.Update = &v
}

// GetUpdateAll returns the UpdateAll field value if set, zero value otherwise.
func (o *AddCommandSchema) GetUpdateAll() bool {
	if o == nil || IsNil(o.UpdateAll) {
		var ret bool
		return ret
	}
	return *o.UpdateAll
}

// GetUpdateAllOk returns a tuple with the UpdateAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetUpdateAllOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateAll) {
		return nil, false
	}
	return o.UpdateAll, true
}

// HasUpdateAll returns a boolean if a field has been set.
func (o *AddCommandSchema) HasUpdateAll() bool {
	if o != nil && !IsNil(o.UpdateAll) {
		return true
	}

	return false
}

// SetUpdateAll gets a reference to the given bool and assigns it to the UpdateAll field.
func (o *AddCommandSchema) SetUpdateAll(v bool) {
	o.UpdateAll = &v
}

// GetIndexOnly returns the IndexOnly field value if set, zero value otherwise.
func (o *AddCommandSchema) GetIndexOnly() bool {
	if o == nil || IsNil(o.IndexOnly) {
		var ret bool
		return ret
	}
	return *o.IndexOnly
}

// GetIndexOnlyOk returns a tuple with the IndexOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetIndexOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IndexOnly) {
		return nil, false
	}
	return o.IndexOnly, true
}

// HasIndexOnly returns a boolean if a field has been set.
func (o *AddCommandSchema) HasIndexOnly() bool {
	if o != nil && !IsNil(o.IndexOnly) {
		return true
	}

	return false
}

// SetIndexOnly gets a reference to the given bool and assigns it to the IndexOnly field.
func (o *AddCommandSchema) SetIndexOnly(v bool) {
	o.IndexOnly = &v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *AddCommandSchema) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *AddCommandSchema) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *AddCommandSchema) SetOverwrite(v bool) {
	o.Overwrite = &v
}

// GetInit returns the Init field value if set, zero value otherwise.
func (o *AddCommandSchema) GetInit() bool {
	if o == nil || IsNil(o.Init) {
		var ret bool
		return ret
	}
	return *o.Init
}

// GetInitOk returns a tuple with the Init field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetInitOk() (*bool, bool) {
	if o == nil || IsNil(o.Init) {
		return nil, false
	}
	return o.Init, true
}

// HasInit returns a boolean if a field has been set.
func (o *AddCommandSchema) HasInit() bool {
	if o != nil && !IsNil(o.Init) {
		return true
	}

	return false
}

// SetInit gets a reference to the given bool and assigns it to the Init field.
func (o *AddCommandSchema) SetInit(v bool) {
	o.Init = &v
}

// GetExtractors returns the Extractors field value if set, zero value otherwise.
func (o *AddCommandSchema) GetExtractors() string {
	if o == nil || IsNil(o.Extractors) {
		var ret string
		return ret
	}
	return *o.Extractors
}

// GetExtractorsOk returns a tuple with the Extractors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetExtractorsOk() (*string, bool) {
	if o == nil || IsNil(o.Extractors) {
		return nil, false
	}
	return o.Extractors, true
}

// HasExtractors returns a boolean if a field has been set.
func (o *AddCommandSchema) HasExtractors() bool {
	if o != nil && !IsNil(o.Extractors) {
		return true
	}

	return false
}

// SetExtractors gets a reference to the given string and assigns it to the Extractors field.
func (o *AddCommandSchema) SetExtractors(v string) {
	o.Extractors = &v
}

// GetParser returns the Parser field value if set, zero value otherwise.
func (o *AddCommandSchema) GetParser() string {
	if o == nil || IsNil(o.Parser) {
		var ret string
		return ret
	}
	return *o.Parser
}

// GetParserOk returns a tuple with the Parser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCommandSchema) GetParserOk() (*string, bool) {
	if o == nil || IsNil(o.Parser) {
		return nil, false
	}
	return o.Parser, true
}

// HasParser returns a boolean if a field has been set.
func (o *AddCommandSchema) HasParser() bool {
	if o != nil && !IsNil(o.Parser) {
		return true
	}

	return false
}

// SetParser gets a reference to the given string and assigns it to the Parser field.
func (o *AddCommandSchema) SetParser(v string) {
	o.Parser = &v
}

func (o AddCommandSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCommandSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["urls"] = o.Urls
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Depth) {
		toSerialize["depth"] = o.Depth
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.UpdateAll) {
		toSerialize["update_all"] = o.UpdateAll
	}
	if !IsNil(o.IndexOnly) {
		toSerialize["index_only"] = o.IndexOnly
	}
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	if !IsNil(o.Init) {
		toSerialize["init"] = o.Init
	}
	if !IsNil(o.Extractors) {
		toSerialize["extractors"] = o.Extractors
	}
	if !IsNil(o.Parser) {
		toSerialize["parser"] = o.Parser
	}
	return toSerialize, nil
}

func (o *AddCommandSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"urls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddCommandSchema := _AddCommandSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddCommandSchema)

	if err != nil {
		return err
	}

	*o = AddCommandSchema(varAddCommandSchema)

	return err
}

type NullableAddCommandSchema struct {
	value *AddCommandSchema
	isSet bool
}

func (v NullableAddCommandSchema) Get() *AddCommandSchema {
	return v.value
}

func (v *NullableAddCommandSchema) Set(val *AddCommandSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCommandSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCommandSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCommandSchema(val *AddCommandSchema) *NullableAddCommandSchema {
	return &NullableAddCommandSchema{value: val, isSet: true}
}

func (v NullableAddCommandSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCommandSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


