/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// Response struct for Response
type Response struct {
	ArchiveResultSchema *ArchiveResultSchema
	SnapshotSchema *SnapshotSchema
	TagSchema *TagSchema
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArchiveResultSchema
	err = json.Unmarshal(data, &dst.ArchiveResultSchema);
	if err == nil {
		jsonArchiveResultSchema, _ := json.Marshal(dst.ArchiveResultSchema)
		if string(jsonArchiveResultSchema) == "{}" { // empty struct
			dst.ArchiveResultSchema = nil
		} else {
			return nil // data stored in dst.ArchiveResultSchema, return on the first match
		}
	} else {
		dst.ArchiveResultSchema = nil
	}

	// try to unmarshal JSON data into SnapshotSchema
	err = json.Unmarshal(data, &dst.SnapshotSchema);
	if err == nil {
		jsonSnapshotSchema, _ := json.Marshal(dst.SnapshotSchema)
		if string(jsonSnapshotSchema) == "{}" { // empty struct
			dst.SnapshotSchema = nil
		} else {
			return nil // data stored in dst.SnapshotSchema, return on the first match
		}
	} else {
		dst.SnapshotSchema = nil
	}

	// try to unmarshal JSON data into TagSchema
	err = json.Unmarshal(data, &dst.TagSchema);
	if err == nil {
		jsonTagSchema, _ := json.Marshal(dst.TagSchema)
		if string(jsonTagSchema) == "{}" { // empty struct
			dst.TagSchema = nil
		} else {
			return nil // data stored in dst.TagSchema, return on the first match
		}
	} else {
		dst.TagSchema = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Response) MarshalJSON() ([]byte, error) {
	if src.ArchiveResultSchema != nil {
		return json.Marshal(&src.ArchiveResultSchema)
	}

	if src.SnapshotSchema != nil {
		return json.Marshal(&src.SnapshotSchema)
	}

	if src.TagSchema != nil {
		return json.Marshal(&src.TagSchema)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableResponse struct {
	value *Response
	isSet bool
}

func (v NullableResponse) Get() *Response {
	return v.value
}

func (v *NullableResponse) Set(val *Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse(val *Response) *NullableResponse {
	return &NullableResponse{value: val, isSet: true}
}

func (v NullableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


