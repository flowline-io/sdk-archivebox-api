/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateCommandSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCommandSchema{}

// UpdateCommandSchema struct for UpdateCommandSchema
type UpdateCommandSchema struct {
	Resume NullableFloat32 `json:"resume,omitempty"`
	OnlyNew *bool `json:"only_new,omitempty"`
	IndexOnly *bool `json:"index_only,omitempty"`
	Overwrite *bool `json:"overwrite,omitempty"`
	After NullableFloat32 `json:"after,omitempty"`
	Before NullableFloat32 `json:"before,omitempty"`
	Status NullableStatusChoices `json:"status,omitempty"`
	FilterType NullableString `json:"filter_type,omitempty"`
	FilterPatterns []string `json:"filter_patterns,omitempty"`
	Extractors NullableString `json:"extractors,omitempty"`
}

// NewUpdateCommandSchema instantiates a new UpdateCommandSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCommandSchema() *UpdateCommandSchema {
	this := UpdateCommandSchema{}
	var onlyNew bool = true
	this.OnlyNew = &onlyNew
	var indexOnly bool = false
	this.IndexOnly = &indexOnly
	var overwrite bool = false
	this.Overwrite = &overwrite
	return &this
}

// NewUpdateCommandSchemaWithDefaults instantiates a new UpdateCommandSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCommandSchemaWithDefaults() *UpdateCommandSchema {
	this := UpdateCommandSchema{}
	var onlyNew bool = true
	this.OnlyNew = &onlyNew
	var indexOnly bool = false
	this.IndexOnly = &indexOnly
	var overwrite bool = false
	this.Overwrite = &overwrite
	return &this
}

// GetResume returns the Resume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCommandSchema) GetResume() float32 {
	if o == nil || IsNil(o.Resume.Get()) {
		var ret float32
		return ret
	}
	return *o.Resume.Get()
}

// GetResumeOk returns a tuple with the Resume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCommandSchema) GetResumeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resume.Get(), o.Resume.IsSet()
}

// HasResume returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasResume() bool {
	if o != nil && o.Resume.IsSet() {
		return true
	}

	return false
}

// SetResume gets a reference to the given NullableFloat32 and assigns it to the Resume field.
func (o *UpdateCommandSchema) SetResume(v float32) {
	o.Resume.Set(&v)
}
// SetResumeNil sets the value for Resume to be an explicit nil
func (o *UpdateCommandSchema) SetResumeNil() {
	o.Resume.Set(nil)
}

// UnsetResume ensures that no value is present for Resume, not even an explicit nil
func (o *UpdateCommandSchema) UnsetResume() {
	o.Resume.Unset()
}

// GetOnlyNew returns the OnlyNew field value if set, zero value otherwise.
func (o *UpdateCommandSchema) GetOnlyNew() bool {
	if o == nil || IsNil(o.OnlyNew) {
		var ret bool
		return ret
	}
	return *o.OnlyNew
}

// GetOnlyNewOk returns a tuple with the OnlyNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCommandSchema) GetOnlyNewOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyNew) {
		return nil, false
	}
	return o.OnlyNew, true
}

// HasOnlyNew returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasOnlyNew() bool {
	if o != nil && !IsNil(o.OnlyNew) {
		return true
	}

	return false
}

// SetOnlyNew gets a reference to the given bool and assigns it to the OnlyNew field.
func (o *UpdateCommandSchema) SetOnlyNew(v bool) {
	o.OnlyNew = &v
}

// GetIndexOnly returns the IndexOnly field value if set, zero value otherwise.
func (o *UpdateCommandSchema) GetIndexOnly() bool {
	if o == nil || IsNil(o.IndexOnly) {
		var ret bool
		return ret
	}
	return *o.IndexOnly
}

// GetIndexOnlyOk returns a tuple with the IndexOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCommandSchema) GetIndexOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IndexOnly) {
		return nil, false
	}
	return o.IndexOnly, true
}

// HasIndexOnly returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasIndexOnly() bool {
	if o != nil && !IsNil(o.IndexOnly) {
		return true
	}

	return false
}

// SetIndexOnly gets a reference to the given bool and assigns it to the IndexOnly field.
func (o *UpdateCommandSchema) SetIndexOnly(v bool) {
	o.IndexOnly = &v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *UpdateCommandSchema) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCommandSchema) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *UpdateCommandSchema) SetOverwrite(v bool) {
	o.Overwrite = &v
}

// GetAfter returns the After field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCommandSchema) GetAfter() float32 {
	if o == nil || IsNil(o.After.Get()) {
		var ret float32
		return ret
	}
	return *o.After.Get()
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCommandSchema) GetAfterOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.After.Get(), o.After.IsSet()
}

// HasAfter returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasAfter() bool {
	if o != nil && o.After.IsSet() {
		return true
	}

	return false
}

// SetAfter gets a reference to the given NullableFloat32 and assigns it to the After field.
func (o *UpdateCommandSchema) SetAfter(v float32) {
	o.After.Set(&v)
}
// SetAfterNil sets the value for After to be an explicit nil
func (o *UpdateCommandSchema) SetAfterNil() {
	o.After.Set(nil)
}

// UnsetAfter ensures that no value is present for After, not even an explicit nil
func (o *UpdateCommandSchema) UnsetAfter() {
	o.After.Unset()
}

// GetBefore returns the Before field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCommandSchema) GetBefore() float32 {
	if o == nil || IsNil(o.Before.Get()) {
		var ret float32
		return ret
	}
	return *o.Before.Get()
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCommandSchema) GetBeforeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Before.Get(), o.Before.IsSet()
}

// HasBefore returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasBefore() bool {
	if o != nil && o.Before.IsSet() {
		return true
	}

	return false
}

// SetBefore gets a reference to the given NullableFloat32 and assigns it to the Before field.
func (o *UpdateCommandSchema) SetBefore(v float32) {
	o.Before.Set(&v)
}
// SetBeforeNil sets the value for Before to be an explicit nil
func (o *UpdateCommandSchema) SetBeforeNil() {
	o.Before.Set(nil)
}

// UnsetBefore ensures that no value is present for Before, not even an explicit nil
func (o *UpdateCommandSchema) UnsetBefore() {
	o.Before.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCommandSchema) GetStatus() StatusChoices {
	if o == nil || IsNil(o.Status.Get()) {
		var ret StatusChoices
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCommandSchema) GetStatusOk() (*StatusChoices, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableStatusChoices and assigns it to the Status field.
func (o *UpdateCommandSchema) SetStatus(v StatusChoices) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *UpdateCommandSchema) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *UpdateCommandSchema) UnsetStatus() {
	o.Status.Unset()
}

// GetFilterType returns the FilterType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCommandSchema) GetFilterType() string {
	if o == nil || IsNil(o.FilterType.Get()) {
		var ret string
		return ret
	}
	return *o.FilterType.Get()
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCommandSchema) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterType.Get(), o.FilterType.IsSet()
}

// HasFilterType returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasFilterType() bool {
	if o != nil && o.FilterType.IsSet() {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given NullableString and assigns it to the FilterType field.
func (o *UpdateCommandSchema) SetFilterType(v string) {
	o.FilterType.Set(&v)
}
// SetFilterTypeNil sets the value for FilterType to be an explicit nil
func (o *UpdateCommandSchema) SetFilterTypeNil() {
	o.FilterType.Set(nil)
}

// UnsetFilterType ensures that no value is present for FilterType, not even an explicit nil
func (o *UpdateCommandSchema) UnsetFilterType() {
	o.FilterType.Unset()
}

// GetFilterPatterns returns the FilterPatterns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCommandSchema) GetFilterPatterns() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.FilterPatterns
}

// GetFilterPatternsOk returns a tuple with the FilterPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCommandSchema) GetFilterPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterPatterns) {
		return nil, false
	}
	return o.FilterPatterns, true
}

// HasFilterPatterns returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasFilterPatterns() bool {
	if o != nil && !IsNil(o.FilterPatterns) {
		return true
	}

	return false
}

// SetFilterPatterns gets a reference to the given []string and assigns it to the FilterPatterns field.
func (o *UpdateCommandSchema) SetFilterPatterns(v []string) {
	o.FilterPatterns = v
}

// GetExtractors returns the Extractors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCommandSchema) GetExtractors() string {
	if o == nil || IsNil(o.Extractors.Get()) {
		var ret string
		return ret
	}
	return *o.Extractors.Get()
}

// GetExtractorsOk returns a tuple with the Extractors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCommandSchema) GetExtractorsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extractors.Get(), o.Extractors.IsSet()
}

// HasExtractors returns a boolean if a field has been set.
func (o *UpdateCommandSchema) HasExtractors() bool {
	if o != nil && o.Extractors.IsSet() {
		return true
	}

	return false
}

// SetExtractors gets a reference to the given NullableString and assigns it to the Extractors field.
func (o *UpdateCommandSchema) SetExtractors(v string) {
	o.Extractors.Set(&v)
}
// SetExtractorsNil sets the value for Extractors to be an explicit nil
func (o *UpdateCommandSchema) SetExtractorsNil() {
	o.Extractors.Set(nil)
}

// UnsetExtractors ensures that no value is present for Extractors, not even an explicit nil
func (o *UpdateCommandSchema) UnsetExtractors() {
	o.Extractors.Unset()
}

func (o UpdateCommandSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCommandSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Resume.IsSet() {
		toSerialize["resume"] = o.Resume.Get()
	}
	if !IsNil(o.OnlyNew) {
		toSerialize["only_new"] = o.OnlyNew
	}
	if !IsNil(o.IndexOnly) {
		toSerialize["index_only"] = o.IndexOnly
	}
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	if o.After.IsSet() {
		toSerialize["after"] = o.After.Get()
	}
	if o.Before.IsSet() {
		toSerialize["before"] = o.Before.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.FilterType.IsSet() {
		toSerialize["filter_type"] = o.FilterType.Get()
	}
	if o.FilterPatterns != nil {
		toSerialize["filter_patterns"] = o.FilterPatterns
	}
	if o.Extractors.IsSet() {
		toSerialize["extractors"] = o.Extractors.Get()
	}
	return toSerialize, nil
}

type NullableUpdateCommandSchema struct {
	value *UpdateCommandSchema
	isSet bool
}

func (v NullableUpdateCommandSchema) Get() *UpdateCommandSchema {
	return v.value
}

func (v *NullableUpdateCommandSchema) Set(val *UpdateCommandSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCommandSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCommandSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCommandSchema(val *UpdateCommandSchema) *NullableUpdateCommandSchema {
	return &NullableUpdateCommandSchema{value: val, isSet: true}
}

func (v NullableUpdateCommandSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCommandSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


