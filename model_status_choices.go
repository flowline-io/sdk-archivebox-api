/*
ArchiveBox API

 <h3>Welcome to your ArchiveBox server's REST API <code>[v1 ALPHA]</code> homepage!</h3> <br/> <i><b>WARNING: This API is still in an early development stage and may change!</b></i> <br/> <ul> <li>‚¨ÖÔ∏è Manage your server: <a href=\"/admin/api/\"><b>Setup API Keys</b></a>, <a href=\"/admin/\">Go to your Server Admin UI</a>, <a href=\"/\">Go to your Snapshots list</a>  <li>üí¨ Ask questions and get help here: <a href=\"https://zulip.archivebox.io\">ArchiveBox Chat Forum</a></li> <li>üêû Report API bugs here: <a href=\"https://github.com/ArchiveBox/ArchiveBox/issues\">Github Issues</a></li> <li>üìö ArchiveBox Documentation: <a href=\"https://github.com/ArchiveBox/ArchiveBox/wiki\">Github Wiki</a></li> <li>üìú See the API source code: <a href=\"https://github.com/ArchiveBox/ArchiveBox/blob/dev/archivebox/api\"><code>archivebox/api/</code></a></li> </ul> <small>Served by ArchiveBox v0.8.5rc50 (<a href=\"https://github.com/ArchiveBox/ArchiveBox/commit/1dff8bae4043efb678c1a6fb517dfa7e7a211150\"><code>1dff8bae</code></a>), API powered by <a href=\"https://django-ninja.dev/\"><code>django-ninja</code></a>.</small> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatusChoices the model 'StatusChoices'
type StatusChoices string

// List of StatusChoices
const (
	INDEXED StatusChoices = "indexed"
	ARCHIVED StatusChoices = "archived"
	UNARCHIVED StatusChoices = "unarchived"
	PRESENT StatusChoices = "present"
	VALID StatusChoices = "valid"
	INVALID StatusChoices = "invalid"
	DUPLICATE StatusChoices = "duplicate"
	ORPHANED StatusChoices = "orphaned"
	CORRUPTED StatusChoices = "corrupted"
	UNRECOGNIZED StatusChoices = "unrecognized"
)

// All allowed values of StatusChoices enum
var AllowedStatusChoicesEnumValues = []StatusChoices{
	"indexed",
	"archived",
	"unarchived",
	"present",
	"valid",
	"invalid",
	"duplicate",
	"orphaned",
	"corrupted",
	"unrecognized",
}

func (v *StatusChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusChoices(value)
	for _, existing := range AllowedStatusChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusChoices", value)
}

// NewStatusChoicesFromValue returns a pointer to a valid StatusChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusChoicesFromValue(v string) (*StatusChoices, error) {
	ev := StatusChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusChoices: valid values are %v", v, AllowedStatusChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusChoices) IsValid() bool {
	for _, existing := range AllowedStatusChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusChoices value
func (v StatusChoices) Ptr() *StatusChoices {
	return &v
}

type NullableStatusChoices struct {
	value *StatusChoices
	isSet bool
}

func (v NullableStatusChoices) Get() *StatusChoices {
	return v.value
}

func (v *NullableStatusChoices) Set(val *StatusChoices) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusChoices) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusChoices(val *StatusChoices) *NullableStatusChoices {
	return &NullableStatusChoices{value: val, isSet: true}
}

func (v NullableStatusChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

